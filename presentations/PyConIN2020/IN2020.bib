
@software{communityTuringWayHandbook2019,
  title = {The {{Turing Way}}: {{A Handbook}} for {{Reproducible Data Science}}},
  shorttitle = {The {{Turing Way}}},
  author = {Community, The Turing Way and Arnold, Becky and Bowler, Louise and Gibson, Sarah and Herterich, Patricia and Higman, Rosie and Krystalli, Anna and Morley, Alexander and O'Reilly, Martin and Whitaker, Kirstie},
  date = {2019-03-25},
  doi = {10.5281/ZENODO.3233986; http://web.archive.org/web/20200920021736/https://zenodo.org/record/3233986},
  url = {https://doi.org/10.5281/zenodo.3233986},
  urldate = {2020-09-20},
  abstract = {Reproducible research is necessary to ensure that scientific work can be trusted. Funders and publishers are beginning to require that publications include access to the underlying data and the analysis code. The goal is to ensure that all results can be independently verified and built upon in future work. This is sometimes easier said than done. Sharing these research outputs means understanding data management, library sciences, software development, and continuous integration techniques: skills that are not widely taught or expected of academic researchers and data scientists.{$<$}em{$>$} {$<$}/em{$><$}em{$>$}The Turing Way{$<$}/em{$>$} is a handbook to support students, their supervisors, funders and journal editors in ensuring that reproducible data science is "too easy not to do". It will include training material on version control, analysis testing, and open and transparent communication with future users, and build on Turing Institute case studies and workshops. This project is openly developed and any and all questions, comments and recommendations are welcome at our github repository: https://github.com/alan-turing-institute/the-turing-way. {$<$}strong{$>$}Release log{$<$}/strong{$>$} {$<$}strong{$>$}v0.0.4:{$<$}/strong{$>$} Continuous integration chapter merged to master. {$<$}strong{$>$}v0.0.3:{$<$}/strong{$>$} Reproducible environments chapter merged to master. {$<$}strong{$>$}v0.0.2:{$<$}/strong{$>$} Version control chapter merged to master. {$<$}strong{$>$}v0.0.1: {$<$}/strong{$>$}Reproducibility chapter merged to master.},
  keywords = {archived},
  organization = {{Zenodo}},
  version = {v0.0.4}
}

@article{dolstraNixOSPurelyFunctional2010,
  title = {{{NixOS}}: {{A}} Purely Functional {{Linux}} Distribution},
  shorttitle = {{{NixOS}}},
  author = {Dolstra, Eelco and Löh, Andres and Pierron, Nicolas},
  date = {2010-11},
  journaltitle = {Journal of Functional Programming},
  volume = {20},
  pages = {577--615},
  issn = {1469-7653, 0956-7968},
  doi = {10/dfrgtj},
  abstract = {Existing package and system configuration management tools suffer from an imperative model, where system administration actions such as package upgrades or changes to system configuration files are stateful: they destructively update the state of the system. This leads to many problems, such as the inability to roll back changes easily, to deploy multiple versions of a package side-by-side, to reproduce a configuration deterministically on another machine, or to reliably upgrade a system. In this paper we show that we can overcome these problems by moving to a purely functional system configuration model. This means that all static parts of a system (such as software packages, configuration files and system startup scripts) are built by pure functions and are immutable, stored in a way analogous to a heap in a purely functional language. We have implemented this model in NixOS, a non-trivial Linux distribution that uses the Nix package manager to build the entire system configuration from a modular, purely functional specification.},
  annotation = {00046},
  langid = {english},
  number = {5-6}
}

@article{dolstraNixSafePolicyFree2004,
  title = {Nix: {{A Safe}} and {{Policy}}-{{Free System}} for {{Software Deployment}}},
  author = {Dolstra, Eelco and de Jonge, Merijn and Visser, Eelco},
  date = {2004},
  pages = {15},
  abstract = {Existing systems for software deployment are neither safe nor sufficiently flexible. Primary safety issues are the inability to enforce reliable specification of component dependencies, and the lack of support for multiple versions or variants of a component. This renders deployment operations such as upgrading or deleting components dangerous and unpredictable. A deployment system must also be flexible (i.e., policy-free) enough to support both centralised and local package management, and to allow a variety of mechanisms for transferring components. In this paper we present Nix, a deployment system that addresses these issues through a simple technique of using cryptographic hashes to compute unique paths for component instances.},
  langid = {english},
  options = {useprefix=true}
}

@article{goswamiDSEAMSDeferredStructural2020,
  ids = {Goswami2019a,goswamiDSEAMSDeferredStructural2019,goswamiDSEAMSDeferredStructural2019a},
  title = {D-{{SEAMS}}: {{Deferred Structural Elucidation Analysis}} for {{Molecular Simulations}}},
  shorttitle = {D-{{SEAMS}}},
  author = {Goswami, Rohit and Goswami, Amrita and Singh, Jayant K.},
  date = {2020-04-27},
  journaltitle = {Journal of Chemical Information and Modeling},
  shortjournal = {J. Chem. Inf. Model.},
  volume = {60},
  pages = {2169--2177},
  publisher = {{American Chemical Society}},
  issn = {1549-9596, 1549-960X},
  doi = {10.1021/acs.jcim.0c00031},
  annotation = {http://web.archive.org/web/20200615174524/https://pubs.acs.org/doi/abs/10.1021/acs.jcim.0c00031},
  archivePrefix = {arXiv},
  eprint = {1909.09830},
  eprinttype = {arxiv},
  keywords = {⛔ No DOI found,archived,cond-mat.mtrl-sci,Condensed Matter - Materials Science,Physics - Atomic and Molecular Clusters,Physics - Chemical Physics,Physics - Computational Physics,physics.atm-clus,physics.chem-ph,physics.comp-ph},
  langid = {english},
  number = {4}
}


